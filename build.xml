<project name="project" default="sync" xmlns:sf="antlib:com.salesforce">
	<property environment="env"/>
    <property name="sf.username" value="${sf.username}"/>
<property name="sf.password" value="${sf.password}"/>
<property name="sf.serverurl" value="${sf.serverurl}"/>    
<property name="SALESFORCE_TESTCLASSES" value="${SALESFORCE_TESTCLASSES}"/> 
<property name="SALESFORCE_TESTLEVEL" value="${SALESFORCE_TESTLEVEL}"/> 


  <property file="build.properties"/>
  <path id="pmd.classpath">
    <fileset dir="./lib">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
  <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.classpath" />

  <!-- <property name="sf.fetchFromDuration"      value="${env.fetchFromDuration}"/> -->
	<taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
		<classpath>
			<pathelement location="lib/ant-salesforce.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement location="lib/xmltask.jar"/>
		</classpath>
	</taskdef>

  <target name="pmd">
  <pmd shortFilenames="true" >
      <formatter type="${pmd.format}" toFile="outputPMD.${pmd.format}" />
   
      <ruleset>rulesets/apex/ruleset.xml</ruleset>

         <ruleset>rulesets/apex/complexity.xml</ruleset>
      <ruleset>rulesets/apex/performance.xml</ruleset>
      <ruleset>rulesets/apex/style.xml</ruleset>
      <ruleset>rulesets/apex/braces.xml</ruleset>
      <ruleset>rulesets/apex/apexunit.xml</ruleset>
      <ruleset>rulesets/apex/security.xml</ruleset>
      <ruleset>rulesets/apex/complexity.xml</ruleset>
      <ruleset>rulesets/apex/empty.xml</ruleset>
      <ruleset>rulesets/apex/metrics.xml</ruleset>
      <fileset dir="./src">
        <include name="**/*.cls"/>
        <include name="**/*.trigger"/>
      </fileset>
   </pmd>
   </target>
	
	
    <macrodef name="gitDiff">
		<sequential>
		
				<exec executable="git" outputproperty="git.diff">
				<arg value="diff" />
				<arg value="-r" />
				<arg value="--name-only" />
				<arg value="93b3eb582a678b38e8f486c7e47c80b779ffbab3" />
				<arg value="HEAD" />
			</exec>
			<echo>${git.diff}</echo>
		</sequential>
	</macrodef>

	<scriptdef name="runSpecifiedTests" language="javascript">
    <attribute name="username"/>
    <attribute name="password"/>
    <attribute name="serverurl"/>
    <![CDATA[
    		//*** CREATE DEPLOY TASK ****
		var deployTask = project.createTask('antlib:com.salesforce:deploy');
		var username = attributes.get("username");
		var password = attributes.get("password");
		var serverurl = attributes.get("serverurl");
		var source = project.getProperty("sf.deployDir");
		
		var specifiedTest = project.getProperty("SALESFORCE_TESTCLASSES");
		var SALESFORCE_TESTLEVEL = project.getProperty("SALESFORCE_TESTLEVEL");
		
		if(username!=null && password!=null && serverurl!=null && source!=null && SALESFORCE_TESTLEVEL=="RunSpecifiedTests"){
			deployTask.setUsername(username);
			deployTask.setPassword(password);
    	    		deployTask.setServerURL(serverurl);
    	    		deployTask.setDeployRoot(source);
    	    		deployTask.setTestLevel('RunSpecifiedTests');
    	    		deployTask.setMaxPoll("5000");
    	  		deployTask.setPollWaitMillis("20000");
			    deployTask.setCheckonly(true);
    			if (specifiedTest) {
    				deployTask.setTestLevel('RunSpecifiedTests');
    				var tests = specifiedTest.split(',');
				
  				//*** Prepare runTest tags ****
  				var runTest = deployTask.getClass().getClassLoader().loadClass("com.salesforce.ant.DeployTask$CodeNameElement");
  				for (var i = 0; i < tests.length; i++) {
  	        		var rt = runTest.newInstance();
  					rt.addText(tests[i]);
  					deployTask.addRunTest(rt);
  				}
			}
    			//*** Execute deploy task ***
    			deployTask.execute();
		}
		else{
		
		deployTask.setUsername(username);
			deployTask.setPassword(password);
    	    		deployTask.setServerURL(serverurl);
    	    		deployTask.setDeployRoot("dist");
    	    		deployTask.setTestLevel(SALESFORCE_TESTLEVEL);
						deployTask.setMaxPoll("5000");
						deployTask.setCheckonly(true);
    	  		deployTask.setPollWaitMillis("20000");
				deployTask.execute();
		}
    		
	]]>
  </scriptdef>
  
  
  <scriptdef name="runSpecifiedTestsdeploy" language="javascript">
    <attribute name="username"/>
    <attribute name="password"/>
    <attribute name="serverurl"/>
    <![CDATA[
    		//*** CREATE DEPLOY TASK ****
		var deployTask = project.createTask('antlib:com.salesforce:deploy');
		var username = attributes.get("username");
		var password = attributes.get("password");
		var serverurl = attributes.get("serverurl");
		var source = project.getProperty("sf.deployDir");
		
		var specifiedTest = project.getProperty("SALESFORCE_TESTCLASSES");
		var SALESFORCE_TESTLEVEL = project.getProperty("SALESFORCE_TESTLEVEL");
		
		if(username!=null && password!=null && serverurl!=null && source!=null && SALESFORCE_TESTLEVEL=="RunSpecifiedTests"){
			deployTask.setUsername(username);
			deployTask.setPassword(password);
    	    		deployTask.setServerURL(serverurl);
    	    		deployTask.setDeployRoot(source);
    	    		deployTask.setTestLevel('RunSpecifiedTests');
    	    		deployTask.setMaxPoll("5000");
    	  		deployTask.setPollWaitMillis("20000");
			
    			//*** Prepare list of test classes ***
    			if (specifiedTest) {
    				deployTask.setTestLevel('RunSpecifiedTests');
    				var tests = specifiedTest.split(',');
				
  				//*** Prepare runTest tags ****
  				var runTest = deployTask.getClass().getClassLoader().loadClass("com.salesforce.ant.DeployTask$CodeNameElement");
  				for (var i = 0; i < tests.length; i++) {
  	        		var rt = runTest.newInstance();
  					rt.addText(tests[i]);
  					deployTask.addRunTest(rt);
  				}
			}
    			//*** Execute deploy task ***
    			deployTask.execute();
		}
		else{
		
		deployTask.setUsername(username);
			deployTask.setPassword(password);
    	    		deployTask.setServerURL(serverurl);
    	    		deployTask.setDeployRoot("dist");
    	    		deployTask.setTestLevel(SALESFORCE_TESTLEVEL);
						deployTask.setMaxPoll("5000");
    	  		deployTask.setPollWaitMillis("20000");
				deployTask.execute();
		}
    		
	]]>
  </scriptdef>



	<target name="diffBuilderWithGitCommit">
		<delete dir="${sf.deployDir}"/>
		<mkdir dir="${sf.deployDir}"/>
		<copy file="${sf.samplePackageXML}" tofile="${sf.deployDir}/package.xml"/>
		<echo>Current GIT Commit : 3a6785ac16389a37de5b05343fe038fd31a68596</echo>
		<echo>Previous Known Successful GIT Commit : 910705a1933c155a98e5e922cbc937ce2d4ab33b</echo>
		<gitDiff/>
		<for list="${git.diff}" param="currentDiff" delimiter="${line.separator}">
			<sequential>
				<if>
					<and>
						<available file="@{currentDiff}"/>
						<matches string="@{currentDiff}" pattern="src/"/>
						<not>
						      <matches string="@{currentDiff}" pattern="package.xml"/>
						</not>
					</and>
					<then>
						<if>
							<matches string="@{currentDiff}" pattern="src/aura/"/>
							<then>
								<propertyregex
									property="auraFolder"
									input="@{currentDiff}"
									regexp="src\/aura\/([a-zA-Z\_]*)\/[a-zA-Z0-9\/\.\_]*"
									select="\1"
									casesensitive="true" 
									override="true"
									defaultValue=""/>
								<if>
									<not>
										<available file="${sf.deployDir}/aura/${auraFolder}" type="dir"/>
									</not>
									<then>
										<echo>Current Component : ${auraFolder}</echo>
										<copy todir="${sf.deployDir}" verbose="false">
											<fileset dir="src">
												<include name="aura/${auraFolder}/**" />
											</fileset>
										</copy>
										<propertyregex
											property="component"
											input="@{currentDiff}"
											regexp="src\/([a-zA-Z]*)\/[a-zA-Z0-9\/\.\_]*"
											select="\1"
											casesensitive="true" 
											override="true"
											defaultValue=""/>
										<propertycopy property="packagedName" from="sf.${component}" override="true"/>
										<echo>Generating Package.xml : ${component} with ${packagedName}</echo>
										<xmltask source="${sf.deployDir}/package.xml" dest="${sf.deployDir}/package.xml">
											<remove path="/Package/types[name/text()=${packagedName}]"/>
											<insert path="//*[local-name()='Package']"> <![CDATA[
				<types>
				<name>${packagedName}</name>
				<members>*</members>
				</types>
											]]>
											</insert>
										</xmltask>
									</then> 
								</if>
							</then>
							<else>
								<propertyregex
									property="currentDiffWithoutSRC"
									input="@{currentDiff}"
									regexp="src\/([a-zA-Z]*\/[a-zA-Z0-9\/\.\_]*)"
									select="\1"
									casesensitive="true" 
									override="true"
									defaultValue=""/>
								<echo>Current Component : ${currentDiffWithoutSRC}</echo>
								<copy todir="${sf.deployDir}" verbose="false">
									<fileset dir="src">
										<include name="${currentDiffWithoutSRC}" />
									</fileset>
								</copy>
								<if>
									<available file="@{currentDiff}-meta.xml"/>
									<then>
										<echo>Generating meta-xml : @{currentDiff}</echo>
										<copy todir="${sf.deployDir}" verbose="false">
											<fileset dir="src">
												<include name="${currentDiffWithoutSRC}-meta.xml" />
											</fileset>
										</copy>
									</then>
								</if>
								<propertyregex
									property="component"
									input="@{currentDiff}"
									regexp="src\/([a-zA-Z]*)\/[a-zA-Z0-9\/\.\_]*"
									select="\1"
									casesensitive="true" 
									override="true"
									defaultValue=""/>
								<propertycopy property="packagedName" from="sf.${component}" override="true"/>
								<echo>Generating Package.xml : ${component} with ${packagedName}</echo>
								<xmltask source="${sf.deployDir}/package.xml" dest="${sf.deployDir}/package.xml">
									<remove path="/Package/types[name/text()=${packagedName}]"/>
									<insert path="//*[local-name()='Package']"> <![CDATA[
		<types>
		<name>${packagedName}</name>
		<members>*</members>
		</types>
									]]>
									</insert>
								</xmltask> 
							</else>
						</if>
						<var name="canDeploy" unset="true"/>
						<property name="canDeploy" value="true"/>
					</then>
				</if>
			</sequential>
		</for>
    </target>

	<property file="build.properties"/>
	
    <target name="ret">
    	<mkdir dir="src"/>
    	<sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="src" unpackaged="package.xml"/>
    </target>
	
	
<property name="sf.username" value="${sf.username}"/>
<property name="sf.password" value="${sf.password}"/>
<property name="sf.serverurl" value="${sf.serverurl}"/>    
<property name="SALESFORCE_TESTCLASSES" value="${SALESFORCE_TESTCLASSES}"/> 
<property name="SALESFORCE_TESTLEVEL" value="${SALESFORCE_TESTLEVEL}"/> 

	
<target name="predeploy">

<echo>"${SALESFORCE_TESTCLASSES}"</echo>
 <antcall target="diffBuilderWithGitCommit">

      <param name="SALESFORCE_TESTCLASSES" value="${SALESFORCE_TESTCLASSES}" />
    </antcall>
	 
	 <runSpecifiedTests username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}"/>
	
 </target>



<target name="deploy">
 <echo>"${SALESFORCE_TESTCLASSES}"</echo>
 <antcall target="diffBuilderWithGitCommit">

      <param name="SALESFORCE_TESTCLASSES" value="${SALESFORCE_TESTCLASSES}" />
    </antcall>
	 <runSpecifiedTestsdeploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}"/>
	 
	
</target>


	
</project>